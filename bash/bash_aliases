# Copy this file to ~/.bash_aliases and make your .bashrc sources it (it should!)

# for every day use
alias c='clear'

alias l='ls -CF'
alias la='ls -CFA'
alias ll='ls -lF'
alias lla='ls -lFA'
# 'human' versions of above
alias lh='ls -CFh'
alias lah='ls -CFAh'
alias llh='ls -lFh'
alias llah='ls -lFAh'
# time ordered
alias lt='ls -CFt'
alias lat='ls -CFAt'
alias llt='ls -lFt'
alias llat='ls -lFAt'
# ps
alias pse='ps -elF'

alias p='pwd'
alias h='history'
alias j='jobs'
alias more='less'
alias m='less'
alias t='tree'
alias f='find . -name'
alias t1='tree -L 1'
alias t2='tree -L 2'
alias t3='tree -L 3'
alias t4='tree -L 4'
alias t5='tree -L 5'

alias \.\.='cd ..'
alias \.\.\.='cd ../..'
alias \.\.\.\.='cd ../../..'
alias \.\.\.\.\.='cd ../../../..'
alias \.\.\.\.\.\.='cd ../../../../..'
alias \.\.\.\.\.\.\.='cd ../../../../../..'
alias \.\.\.\.\.\.\.\.='cd ../../../../../../..'
alias \.\.\.\.\.\.\.\.\.='cd ../../../../../../../..'
alias up='cd ..'
alias upup='cd ../..'
alias upupup='cd ../../..'

# cd to most recently changed subdir
alias cdt='cd  "$(\ls -1dt ./*/ | head -n 1)"'

# handle common typo
alias xs=cd

# Long prompt
alias lp='export PS1="\[\e]0;\u@\h: \w\a\]${debian_chroot:+($debian_chroot)}\u@\h:\w\$ "'
# short prompt
alias sp='export PS1="\u:\W\$ "'

# concatenated date
alias mydate='date +%F-%H:%M:%S'

# iptables
alias ipt='sudo iptables'

# relative cd
CDPATH=$CDPATH:.:..:../..:../../..:../../../..:../../../../..:../../../../../..:$HOME

# gvim
alias gv='gvim'
alias gvd='gvimdiff'
alias gvimer='gvim --remote-silent'

# python
alias py='python'
alias py2='python2'
alias py3='python3'

# gvimpy: load all python sources in this dir and below
alias gvimpy='gvim `find . -name \*\.py `'
# gvimpy: load all python sources in this dir and below in seperate tabs
alias gvimpyt='gvim -p `find . -name \*\.py `'

# Start prompt-toolkit-python in vi mode
alias ptpy='ptpython --vi'

# C/C++
# gvimc: load all C/C++ sources in this dir and below
alias gvimc='gvim `find . -name \*.c -print -o -name \*.cpp -print -o -name \*.cc -print -o -name \*.h -print -o -name \*.hpp -print`'
# gvimpy: load all C/C++ sources in this dir and below in seperate tabs
alias gvimct='gvim -p `find . -name \*.c -print -o -name \*.cpp -print -o -name \*.cc -print -o -name \*.h -print -o -name \*.hpp -print`'

# PyCharm
# no aliases are used, see one of these:
# 1) pycharm installation already created 'charm' in /usr/local/bin/charm
# 2) link it yourself: soft link /bin/pc and|or /bin/pycharm 
#                      to the right executable on your target
# alias pycharm="~/ws/opt/pycharm-community-2016.2/bin/pycharm.sh"
# alias pc="~/ws/opt/pycharm-community-2016.2/bin/pycharm.sh"

# Eclipse / Luna / Mars
# Removed !

# Git
# alias gis='git istatus'
alias gis='git status'
alias gib='git branch'
alias gitnp='git --no-pager'
alias gil='git log --name-status'
alias gilo='git log --oneline'

# json 
# pretyy-print json
alias pjson='function _pjson(){ python -m json.tool $1 | pygmentize -l json; }; _pjson'
# example of function in the alias
alias blah='function _blah(){ echo "First: $1"; echo "Second: $2"; };_blah'

# grep
alias rgrep='grep -E -R -I -n' # grep recursive, don't match binary files, print line numbers
alias cgrep='find . \( -name \*\.h -o -name \*\.hpp -o -name \*\.cc -o -name \*\.cpp -o -name \*\.cxx -o -name \*\.c \) -a -type f -print0 | xargs -0 grep -E -n'
alias hgrep='find . \( -name \*\.h -o -name \*\.hpp \) -a -type f -print0 | xargs -0 grep -E -n'
#alias pygrep='find . \( -name \*\.py \) -a -type f -print0 | xargs -0 grep -E -n'
alias mgrep='find . \( -name \*\.m \) -a -type f -print0 | xargs -0 grep -E -n'
alias xmlgrep='find . \( -name \*\.xml \) -a -type f -print0 | xargs -0 grep -E -n'
alias idlgrep='find . \( -name \*\.idl \) -a -type f -print0 | xargs -0 grep -E -n'
#alias igrep='idlgrep'
alias lgrep='ls -lhAF | grep -E -i'
alias odlgrep='find . \( -name \*\.odl \) -a -type f -print0 | xargs -0 grep -E -n'
alias ogrep='odlgrep'

# ipynb grep, uses nbgrep
alias igrep='find . \( -name \*\.ipynb \) -a -type f -print0 | xargs -0 nbgrep'

# find most recent file
alias findlatest='find $DIR -type f -printf "%T@ %p\n" | sort -n | tail -n 1 | cut -d" " -f 2 '

# sort files by size
# https://unix.stackexchange.com/questions/88065/sorting-files-according-to-size-recursively
alias sortfbs='find . -type f -printf "%s\t%p\n" | sort -nr'
alias sortfbt='find $DIR -type f -printf "%T@ %p\n" | sort -nr | cut -d" " -f 2 '

# make destdir and copy
mkcp() {
    test -d "$2" || mkdir -p "$2"
    cp -r "$1" "$2"
}

# find file or link
alias ff='find . -type f -name'
# find dir
alias fd='find . -type d -name'

# Bash internal options
#shopt -s histverify

# Environment variables
# These are not aliases and should eventualy move to another file!
export SVN_EDITOR=vim

# Grab the current working directory, in this terminal
# Silently make a working dir
mkdir -p ~/.tmp
alias gwd='echo $(pwd) > ~/.tmp/cwd.$USER'
# Change the current working directory in the NEW terminal
alias cwd='cd "$(cat ~/.tmp/cwd.$USER)"'

# ------------------------------------
# Docker aliases and functions
# ------------------------------------

# Get latest container ID
alias dl="docker ps -l -q"

# Get container processes
alias dps="docker ps"

# Get processes including stopped containers
alias dpa="docker ps -a"
alias dpsa="docker ps -a"

# Get images
alias di="docker images"
alias dim="docker images"
alias did="docker images -f 'dangling=true' "

# Get container IP
alias dip="docker inspect --format '{{ .NetworkSettings.IPAddress }}'"

# Run deamonized container, e.g., $dkd base /bin/echo hello
alias dkd="docker run -d -P"

# Run interactive container, e.g., $dki base /bin/bash
alias dki="docker run -i -t -P"

# Execute interactive container, e.g., $dex base /bin/bash
alias dex="docker exec -i -t"

# Stop all containers
dstop() { docker stop $(docker ps -a -q); }

# Remove all containers
drm() { docker rm $(docker ps -a -q); }

# Stop and Remove all containers
alias drmf='docker stop $(docker ps -a -q) && docker rm $(docker ps -a -q)'

# Remove all images
dri() { docker rmi $(docker images -q); }

# Dockerfile build, e.g., $dbu tcnksm/test 
dbu() { docker build -t=$1 .; }

# Show all alias related docker
dalias() { alias | grep 'docker' | sed "s/^\([^=]*\)=\(.*\)/\1 => \2/"| sed "s/['|\']//g" | sort; }

# Bash into running container
dbash() { docker exec -it $(docker ps -aqf "name=$1") bash; }

# Run ctop container
alias ctop='docker run --rm -ti --name=ctop -v /var/run/docker.sock:/var/run/docker.sock quay.io/vektorlab/ctop:latest'

# Use the runlike container to see original commandline used to start container
# Use it: $ runlike CONTAINER
alias runlike="docker run --rm -v /var/run/docker.sock:/var/run/docker.sock assaflavie/runlike"

# ------------------------------------
# Technicolor aliases and functions
# ------------------------------------
alias dwrt='dockerwrt'

alias zendude='function _zendude(){ MSG=${1:-"Sometins goin down boy \!"}; zenity --info --text $MSG --title "Hey Dude !"; };_zendude'

#alias lua=lua5.3


# ---------------
# Usefull goodies
# ---------------

# dirs
alias dv='dirs -v'

function stitle(){

  if [ -z "$PS1_BACK" ];  # set backup if it is empty
    then
      PS1_BACK="$PS1"
  fi

  TITLE="\[\e]0;$*\a\]"
  PS1="${PS1_BACK}${TITLE}"
}

# Info on process specified by name (loose match)
function ppgrep() {
    pgrep "$1" | xargs -r ps -f fp
}

# uncrust; copied from amxdev container
uncrust () 
{ 
    CONF=$1;
    if [[ -z $CONF ]]; then
        CONF="uncrust.conf";
    fi;
    find . -name "*.c" > files.txt;
    find . -name "*.h" >> files.txt;
    uncrustify --replace --no-backup -c $CONF -F files.txt;
    rm files.txt
}

# pnl: print '$1' new lines (to seperate output)
pnl()
{
    NMBR=${1:-10};
    printf %${NMBR}s | tr " " "\n"; 
};

# indox = In DOcker eXecute 
# usage: indox containername command
# example: indox distil_srcs make menuconfig
indox () {
    CONTAINER=$1
    set -- "${@:2}"
    docker exec -ti -u $USER ${CONTAINER} /bin/bash -c cd $PWD && $@
}

#
# ssh to OpwnWrt target with root/sah 
#
ssah () 
{ 
    sshpass -p sah ssh root@$1
}

lion ()
{
    str=$1;
    fname=${str%:*};
    line=${str#*:};
    echo "clion --line $line $fname";
    clion --line $line $fname
}

tree_nbco ()
# tree NoteBook Clear Output
# Clears output cells from all python notebooks in th ecurrent file-tree
{
    NBS=$(find . -name \*.ipynb)

    echo 'Processing following files:'
    for nb in $NBS; 
        do 
            echo '    '$nb; 
        done

    for nb in $NBS; 
        do 
            echo 'Processing' $nb; 
	    jupyter nbconvert --ClearOutputPreprocessor.enabled=True --inplace $nb
        done

}

git_nbco ()
# git NoteBook Clear Output
# Clears output cells from python notebooks when they are in the cache (ready to be commited)
# Use this command to clean notebooks before committing them into a repo
{
    CWD=$PWD
    cd $(git rev-parse --show-toplevel);

    NBS=$(git diff --cached --name-only | grep ipynb$)

    echo 'Processing following files:'
    for nb in $NBS; 
        do 
            echo '    '$nb; 
        done

    for nb in $NBS; 
        do 
            echo 'Processing' $nb; 
	    jupyter nbconvert --ClearOutputPreprocessor.enabled=True --inplace $nb
        done
#
    cd $CWD
}

# Jupyter notebooks
alias jup_rob="conda activate ehb_robotics && cd ~/workspace && jupyter notebook"
alias jup_lab="conda activate juplab && cd ~/workspace && jupyter lab"

# NoteBook Clear Output cells; use $ nbco notebookname.ipynb
alias nbco="jupyter nbconvert --ClearOutputPreprocessor.enabled=True --inplace"

# Ubuntu specific
# xdg-open - opens a file or URL in the user's preferred application
alias xo="xdg-open" 

# Conda aliases
alias coa="conda activate"
alias cod="conda deactivate"
alias coel="conda env list"
alias coaj="conda activate juplab"
alias coap="conda activate ptrsm_1"

# swap ssh config files
alias sscya='cd ~/.ssh/; cp config.ya config; cat config; cd -'
alias sschk='cd ~/.ssh/; cp config.hk config; cat config; cd -'

# psudo, see https://stackoverflow.com/questions/44726377/sudo-python-command-not-found
psudo() { sudo env PATH="$PATH" "$@"; } 

####
# Python venv related
####
#
## vba: short for 'source .venv/bin/activate' will also deactivate existing venv or conda env
vba() {
  command -v conda >/dev/null 2>&1 && conda deactivate
  command -v deactivate >/dev/null 2>&1 && deactivate
 
  if [ -f .venv/bin/activate ]; then
     . .venv/bin/activate
     return
  fi 
  
  if [ -f ./venv/bin/activate ]; then
     . ./venv/bin/activate
     return
  fi 
}

####
# Ubuntu multipass
####
alias mp=multipass

####
# functions to search through files
####

# Function to search for a pattern within files matching a given filename regex, with colored output, excluding hidden directories
function rgrep_filename_color() {

  if [ $# -ne 2 ]; then
    echo "Error: This function requires exactly two arguments: search_pattern and filename_regex." >&2  # Print error to stderr
    return 1  # Indicate failure
  fi

  local pattern="$1"
  local filename_regex="$2"

  echo "Looking for '"$pattern"' in '"$filename_regex"'"
  # echo "pattern: " $pattern
  # echo "filename_regex: " $filename_regex
  # sleep 1

  # Combine grep and find for recursive search with filename filtering and colored output, excluding hidden directories
  #find . -type f -regextype posix-egrep -regex "$filename_regex" \
  find . -type f -iregex "$filename_regex" \
       ! -path '*/\.*' -exec grep -HrnI --color=always "$pattern" {} +
}


# Function to search for a pattern within Python (.py) files, with colored output, excluding hidden directories
function pygrep() {
  local pattern="$1"

  # Call rgrep_filename_color with the pattern and a regex for Python files
  rgrep_filename_color "$pattern" ".*\.py$" 
}
# Examples: pygrep 'File\|file'


# Function to search for a pattern within Markdown (.md) files, with colored output, excluding hidden directories
function mdgrep() {
  local pattern="$1"

  # Call rgrep_filename_color with the pattern and a regex
  rgrep_filename_color "$pattern" ".*\.md$" 
}


# Function to search for a pattern within json (.json) files, with colored output, excluding hidden directories
function jgrep() {
  local pattern="$1"

  # Call rgrep_filename_color with the pattern and a regex
  rgrep_filename_color "$pattern" ".*\.json$" 
}


# Function to search for a pattern within C/C++ files, with colored output, excluding hidden directories
function ccgrep() {
  local pattern="$1"

  # Call rgrep_filename_color with the pattern and a regex
  rgrep_filename_color "$pattern" ".*\.\(c\|cc\|cpp\|cxx\|h\|hpp\)$" 
}


# Function to search for a pattern within C/C++ headers, with colored output, excluding hidden directories
function hhgrep() {
  local pattern="$1"

  # Call rgrep_filename_color with the pattern and a regex
  rgrep_filename_color "$pattern" ".*\.\(h\|hpp\)$" 
}


# Function and alias that recursively traverse a given directory, 
# and for each directory give the name of the most recent file in it.
#
function newest_file_per_dir() {
    local dir="$1"

    find "$dir" -type d -exec bash -c '
        newest=$(find "$1" -type f -printf "%T@ %p\n" | sort -nr | head -n 1 | cut -d" " -f2-)
        if [ -n "$newest" ]; then
            echo "$1: $newest"
        fi
    ' sh {} \;
}

# Function to find most recent file in a dir-tree
function newest_file() {
    local dir="$1"
    find "$dir" -type f -printf "%T@ %p\n" | sort -nr | head -n 1 | cut -d" " -f2-
}

# Function to find the oldest file in a dir-tree
function oldest_file() {
    local dir="$1"
    find "$dir" -type f -printf "%T@ %p\n" | sort -n | head -n 1 | cut -d" " -f2-
}

# Function to find the N newest files in a directory
#
# Arguments:
#   $1: The directory to search in.
#   $2: (Optional) The number of newest files to list. Defaults to 1.
#
# Output:
#   Prints the paths of the N newest files, one per line.
function newest_files() {
    local dir="$1"      # The directory to search
    local count_arg="$2" # The provided count argument (might be empty)
    local count         # The final count to use

    # Check if the directory argument is provided and is a directory
    if [[ -z "$dir" || ! -d "$dir" ]]; then
        echo "Error: Please provide a valid directory as the first argument." >&2
        return 1
    fi

    # Set the count: use the provided argument or default to 1
    if [[ -z "$count_arg" ]]; then
        # If the second argument is empty, default to 1
        count=1
    else
        # If the second argument is provided, validate it
        if ! [[ "$count_arg" =~ ^[1-9][0-9]*$ ]]; then
            echo "Error: The second argument (count) must be a positive integer." >&2
            return 1
        fi
        # Use the validated provided count
        count="$count_arg"
    fi

    # Find files (-type f) in the specified directory ($dir), recursively (intrinsic)
    # Print modification time (%T@) followed by a space and the path (%p\n)
    # Sort numerically in reverse order (-nr) based on the timestamp
    # Take the top 'count' lines (-n "$count")
    # Cut away the timestamp and the first space (-d" " -f2-), leaving only the file path
    find "$dir" -type f -printf "%T@ %p\n" | sort -nr | head -n "$count" | cut -d" " -f2- | xargs ls -l
}

# Wrapper function for the ranger Terminal File Manager
# from https://github.com/ranger/ranger/wiki/Integration-with-other-programs#bash-compatible-shells-1
#
# With this, your shell changes the directory only when you quit ranger with keybinding capital Q.
#
function ranger {
    local IFS=$'\t\n'
    local tempfile="$(mktemp -t tmp.XXXXXX)"
    local ranger_cmd=(
        command
        ranger
        --cmd="map Q chain shell echo %d > "$tempfile"; quitall"
    )
    
    ${ranger_cmd[@]} "$@"
    if [[ -f "$tempfile" ]] && [[ "$(cat -- "$tempfile")" != "$(echo -n `pwd`)" ]]; then
        cd -- "$(cat "$tempfile")" || return
    fi
    command rm -f -- "$tempfile" 2>/dev/null
}

# Function to remove dangling Docker images (drdi = Docker Remove Dangling Images)
drdi() {
  dangling_images=$(docker images -f dangling=true -q --no-trunc)

  # Check if there are any dangling images
  if [[ -n "$dangling_images" ]]; then
    echo "Removing the following dangling images:"
    echo "$dangling_images"
    docker rmi $dangling_images
    echo "Dangling images removed."
  else
    echo "No dangling images found."
  fi
}

# Funtion to print last log line of each running container
lastlogline () 
{ 
    docker ps -q | xargs -I'{}' sh -c 'docker inspect {} -f "  -- {{.Name}}" && docker logs --tail 1 {}'
}

# Function to count number of files in subdirs of cwd
count_files_in_subdirs() {
    # Loop through each subdirectory in the current directory
    for dir in */; do
        # Check if it's actually a directory
        if [[ -d "$dir" ]]; then
            # Count the number of files in the subdirectory
            file_count=$(find "$dir" -maxdepth 1 -type f | wc -l)
    
            # Remove the trailing slash from the directory name for cleaner output
            dir_name="${dir%/}"
    
            # Print the directory name and the file count
            echo "$dir_name: $file_count files"
        fi
    done
}

# Function to open multiple files in gvim tabs at specific lines.
# Arguments should be in the format: filename:linenumber:
# Example: gvimt script.py:50: notes.txt:10: "my config.yaml:5:"
gvimt() {
  # --- Basic Input Validation ---
  if [[ $# -eq 0 ]]; then
    echo "Usage: gvimt filename1:line1: [filename2:line2:] ..." >&2
    echo "Error: No arguments provided." >&2
    return 1 # Indicate error
  fi

  # --- Initialize Variables ---
  # Use arrays to correctly handle filenames/arguments with spaces or special chars
  local files=()      # Array to store the filenames
  local cmd_args=()   # Array to store the command arguments (-c '...') for gvim
  local counter=0     # To know which file is the first one
  # Regex to match and capture 'filename:number:' format.
  # Allows any characters in filename except colon right before number.
  local file_pattern="^(.+):([0-9]+):$"

  # --- Process Each Argument ---
  for arg in "$@"; do
    # Check if the argument matches the required format
    if [[ "$arg" =~ $file_pattern ]]; then
      # Extract the filename (group 1) and line number (group 2)
      local filename="${BASH_REMATCH[1]}"
      local linenumber="${BASH_REMATCH[2]}"

      # Add the extracted filename to the 'files' array
      files+=("$filename")

      # Construct the appropriate '-c' command argument
      if (( counter == 0 )); then
        # For the first file, use 'tabfirst' to go to the tab and '| N' to go to line N
        cmd_args+=("-c" "tabfirst | $linenumber")
      else
        # For subsequent files, use 'tabnext' to switch tabs first
        cmd_args+=("-c" "tabnext | $linenumber")
      fi
      # Increment the file counter
      ((counter++))
    else
      # Print a warning to standard error if an argument doesn't match
      echo "Warning: Skipping invalid argument format '$arg'. Expected 'filename:linenumber:'" >&2
      continue # Skip to the next argument
    fi
  done

  # --- Execute gvim if Valid Files Found ---
  if (( ${#files[@]} > 0 )); then
    # If we processed at least one valid file argument:
    # Add the final command to ensure the *first* tab is selected at the end
    cmd_args+=("-c" "tabfirst")

    # Execute gvim:
    # -p : Open arguments in tabs
    # "${files[@]}" : Pass the filenames correctly (handles spaces etc.)
    # "${cmd_args[@]}" : Pass the '-c' commands correctly
    # Optional: Uncomment the next line to see the command before execution
    # echo "Executing: gvim -p ${files[@]} ${cmd_args[@]}"
    gvim -p "${files[@]}" "${cmd_args[@]}"

    return 0 # Indicate success
  else
    # If no valid file arguments were found after checking all input
    echo "Error: No valid file arguments found to process." >&2
    return 1 # Indicate error
  fi
}

# Optional: You can create a shorter alias if you like
alias gvt=gvimt

